{
  "core": "Core",
  "dashboard": "Dashboard",

  "menu": {
    "core": "Core",
    "rest": "Rest",
    "rest-rtk": "Rest (RTK)",
    "rest-redux": "Rest (Redux)",
    "redux": "Redux",
    "graph-ql": "GraphQL",
    "event-bus": "EventBus",
    "rxjs-subject": "RxJsSubject",
    "lazy-suspense": "LazySuspense"
  },

  "router": {
    "rest-rtk": "Core Rest (RTK)",
    "rest-redux": "Core Rest (Redux)",
    "redux": "Core Redux",
    "graph-ql": "Core GraphQL",
    "event-bus": "Core EventBus",
    "rxjs-subject": "Core RxJsSubject",
    "lazy-suspense": "Core LazySuspense"
  },

  "error": {
    "not-found": "404 - Not Found"
  },

  "index": {
    "info1": "This is a parent component, child is rendered using <Outlet> component.",
    "info2": "Child re-render does not affect this component state."
  },

  "rest-rtk": {
    "label": {
      "actions": "Actions",
      "results": "Results",
      "results-mutation": "Results Mutation",
      "results-lazy": "Results lazy",
      "user-id": "[get/update/patch/delete] id",
      "error": "Error"
    },
    "button": {
      "get": "get user",
      "create": "create user",
      "update": "update user",
      "patch": "patch user",
      "delete": "delete user"
    }
  },

  "rest-redux": {
    "label": {
      "actions": "Actions",
      "results": "Results",
      "error": "Error"
    },
    "button": {
      "get-all": "get all users",
      "get-random": "get random user",
      "create": "create new user",
      "change-data": "change random user data",
      "change-age": "change random user age",
      "remove": "remove random user"
    }
  },

  "redux": {
    "label": {
      "person-state": "Person State",
      "age": "age",
      "name": "name",
      "type": "type",
      "desc": "desc",
      "counter-state": "Counter State",
      "counter": "counter",
      "status": "status",
      "increment": "increment amount"
    },
    "button": {
      "change-id": "change id",
      "increment-age": "increment age",
      "switch-name": "switch name",
      "switch-type": "switch type",
      "change-desc": "change description",
      "add": "add",
      "add-async": "add async",
      "add-if-odd": "add if odd"
    }
  },

  "event-bus": {
    "warning1": "EventBus is an anti-pattern and should be avoided.",
    "warning2": "For event-based apps you should use observables based libraries (ex. rxjs).",
    "label": {
      "register": "Register channel",
      "subscribe": "Subscribe channel",
      "dispatch": "Dispatch message (output logged in console)",
      "unsubscribe": "Unsubscribe channel",
      "unregister": "Unregister channel"
    },
    "button": {
      "register": "register",
      "subscribe": "subscribe",
      "dispatch": "dispatch",
      "unsubscribe": "unsubscribe",
      "unregister": "unregister"
    }
  },

  "rxjs-subject": {
    "subject": "Subject",
    "subscription": "Subscription",
    "label": {
      "create": "Create Subject",
      "subscribe": "Subscribe Subject",
      "dispatch": "Dispatch Subject (output logged in console)",
      "unsubscribe": "Unsubscribe Subject",
      "remove": "Remove Subject"
    },
    "button": {
      "create": "create",
      "subscribe": "subscribe",
      "dispatch": "dispatch",
      "unsubscribe": "unsubscribe",
      "remove": "remove"
    }
  },

  "lazy-suspense": {
    "loading": "Loading lazily...",
    "warning1": "UserViewer component loads data inside useEffect hook.",
    "warning2": "This is just an example as you should never load data inside useEffect."
  },

  "user-viewer": {
    "loading": "Loading users...",
    "label": {
      "user": "User",
      "name": "Name",
      "age": "Age"
    }
  }
}
